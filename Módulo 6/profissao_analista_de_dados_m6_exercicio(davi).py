# -*- coding: utf-8 -*-
"""Profissao Analista de dados M6 Exercicio(Davi).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16OskjaGx74OdwduvpFQ1TXgQaSJS3KjB

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo** | Python: Programação Orientada a Objetos
Caderno de **Exercícios**<br>
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Um pouco de teoria;</li>
  <li>Classes;</li>
  <li>Objetos;</li>
  <li>Herança.</li>
</ol>

---

# **Exercícios**

## 0\. Preparação do ambiente

Neste exercício vamos trabalhar com os arquivos de csv e texto definidos abaixo. Execute cada uma das células de código para escrever os arquivos na sua máquina virtual.

* **carros.csv**: arquivo csv com informações sobre carros (venda, manutenção, portas, etc.).
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile carros.csv
# id,valor_venda,valor_manutencao,portas,pessoas,porta_malas
# 1,vhigh,med,2,2,small
# 2,med,vhigh,2,2,small
# 3,low,vhigh,2,2,small
# 4,low,high,2,2,small
# 5,low,high,2,2,small
# 6,low,high,4,4,big
# 7,low,high,4,4,big
# 8,low,med,2,2,small
# 9,low,med,2,2,small
# 10,low,med,2,2,small
# 11,low,med,4,4,big
# 12,low,low,2,2,small
# 13,low,low,4,4,small
# 14,low,low,4,4,med

"""* **musica.txt**: arquivo texto com a letra da música Roda Viva do Chico Buarque."""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile musica.txt
# Roda Viva
# Chico Buarque
# 
# Tem dias que a gente se sente
# Como quem partiu ou morreu
# A gente estancou de repente
# Ou foi o mundo então que cresceu
# A gente quer ter voz ativa
# No nosso destino mandar
# Mas eis que chega a roda viva
# E carrega o destino pra lá
# 
# Roda mundo, roda-gigante
# Roda moinho, roda pião
# 
# O tempo rodou num instante
# Nas voltas do meu coração
# A gente vai contra a corrente
# Até não poder resistir
# Na volta do barco é que sente
# O quanto deixou de cumprir
# Faz tempo que a gente cultiva
# A mais linda roseira que há
# Mas eis que chega a roda viva
# E carrega a roseira pra lá
# 
# Roda mundo, roda-gigante
# Roda moinho, roda pião

"""---

## 1\. Classe para ler arquivos de texto

Crie a classe `ArquivoTexto`. Ela deve conter os seguintes atributos:

*   `self.arquivo`: Atributo do tipo `str` com o nome do arquivo;
*   `self.conteudo`: Atributo do tipo `list` onde cada elemento é uma linha do arquivo;

A classe também deve conter o seguinte método:

*   `self.extrair_linha`: Método que recebe como parâmetro o número da linha e retorna o seu conteúdo.
"""

class ArquivoTexto(object):

    def __init__(self, arquivo: str):
        self.arquivo = arquivo
        self.conteudo = self.ler_arquivo()

    def ler_arquivo(self):
        with open(self.arquivo, 'r') as arquivo:
            return arquivo.readlines()

    def extrair_linha(self, numero_linha: int):
        if 1 <= numero_linha <= len(self.conteudo):
            return self.conteudo[numero_linha - 1]
        else:
            return f"Linha {numero_linha} não existe no arquivo."

"""Utilize o código abaixo para testar sua classe."""

arquivo_texto = ArquivoTexto(arquivo='musica.txt')

numero_linha = 1
print(arquivo_texto.extrair_linha(numero_linha=numero_linha)) # Roda Viva

numero_linha = 10
print(arquivo_texto.extrair_linha(numero_linha=numero_linha)) # Mas eis que chega a roda viva

numero_linha = 4
print(arquivo_texto.extrair_linha(numero_linha=numero_linha))

"""---

## 2\. Classe para ler arquivos de csv

Crie a classe `ArquivoCSV`. Ela deve extender (herdar) a classe `ArquivoTexto` para reaproveitar os seus atributos (`self.arquivo` e `self.conteudo`) e método (`self.extrair_linha`). Além disso, adicione o seguinte atributo:

*   `self.colunas`: Atributo do tipo `list` onde os elementos são os nome das colunas;

A classe também deve conter o seguinte método:

*   `self.extrair_coluna_da_linha`: Método que recebe como parâmetro o numero da linha e o indice da coluna e retorna o valor em questão.
"""

class ArquivoTexto:
    def __init__(self, arquivo: str):
        self.arquivo = arquivo
        self.conteudo = self.ler_arquivo()

    def ler_arquivo(self):
        try:
            with open(self.arquivo, 'r') as arquivo:
                return arquivo.readlines()
        except FileNotFoundError:
            print(f"Arquivo '{self.arquivo}' não encontrado.")
            return []


    def extrair_linha(self, numero_linha: int):
        if 1 <= numero_linha <= len(self.conteudo):
            return self.conteudo[numero_linha - 1]
        else:
            return f"Linha {numero_linha} não existe no arquivo."

class ArquivoCSV(ArquivoTexto):
    def __init__(self, arquivo: str):
        super().__init__(arquivo)
        self.colunas = self.extrair_colunas()

    def extrair_colunas(self):
        if self.conteudo:
            primeira_linha = self.conteudo[0].strip().split(',')
            return primeira_linha
        else:
            return []

    def extrair_coluna_da_linha(self, numero_linha: int, indice_coluna: int):
        if 1 <= numero_linha <= len(self.conteudo) and 0 <= indice_coluna < len(self.colunas):
            linha = self.conteudo[numero_linha - 1].strip().split(',')
            return linha[indice_coluna]
        else:
            return f"Linha {numero_linha} ou coluna {indice_coluna} não existe no arquivo CSV."

"""Utilize o código abaixo para testar sua classe."""

arquivo_csv = ArquivoCSV(arquivo='carros.csv')

numero_linha = 1
print(arquivo_csv.extrair_linha(numero_linha=numero_linha)) # id,valor_venda,valor_manutencao,portas,pessoas,porta_malas

print(arquivo_csv.colunas) # ['id', 'valor_venda', 'valor_manutencao', 'portas', 'pessoas', 'porta_malas']

numero_linha = 10
print(arquivo_csv.extrair_linha(numero_linha=numero_linha)) # 9,low,med,2,2,small

numero_linha = 10
indice_coluna = 1
print(arquivo_csv.extrair_coluna_da_linha(numero_linha=numero_linha, indice_coluna=indice_coluna)) # low

"""---"""